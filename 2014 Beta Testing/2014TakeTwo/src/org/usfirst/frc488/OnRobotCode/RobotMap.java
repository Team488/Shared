// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc488.OnRobotCode;
    
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Gyro;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DigitalOutput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Solenoid;
import xbot.common.logging.LogProducer;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Solenoid actuatorsShiftSolenoid;
    public static Compressor actuatorsCompressor;
    public static SpeedController actuatorsLeftFrontController;
    public static SpeedController actuatorsLeftRearController;
    public static SpeedController actuatorsRightFrontController;
    public static SpeedController actuatorsRightRearController;
    public static SpeedController actuatorsCatapultController;
    public static SpeedController actuatorsFrontDeployMotor;
    public static SpeedController actuatorsRearDeployMotor;
    public static SpeedController actuatorsFrontCollectorRoller;
    public static Solenoid actuatorsEjectorSolenoid;
    public static SpeedController actuatorsRearCollectorRoller;
    public static DigitalOutput actuatorsArduino1;
    public static DigitalOutput actuatorsArduino2;
    public static DigitalOutput actuatorsArduino3;
    public static Gyro gyro;
    public static AnalogInput sensorsFrontCollectorPot;
    public static AnalogInput sensorsBackCollectorPot;
    public static AnalogInput sensorsBallSettledInCatapult;
    public static AnalogInput sensorsCatapultPotentiometer;
    public static DigitalInput sensorsFrontUpLimitSwitch;
    public static DigitalInput sensorsFrontDownLimitSwitch;
    public static DigitalInput sensorsBackUpLimitSwitch;
    public static DigitalInput sensorsBackDownLimitSwitch;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public RobotMap() {
    }
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        actuatorsShiftSolenoid = new Solenoid(1, 1);
	LiveWindow.addActuator("Actuators", "ShiftSolenoid", actuatorsShiftSolenoid);
        
        actuatorsCompressor = new Compressor(14);
	
        
        actuatorsLeftFrontController = new Talon(0);
	LiveWindow.addActuator("Actuators", "LeftFrontController", (Talon) actuatorsLeftFrontController);
        
        actuatorsLeftRearController = new Talon(1);
	LiveWindow.addActuator("Actuators", "LeftRearController", (Talon) actuatorsLeftRearController);
        
        actuatorsRightFrontController = new Talon(2);
	LiveWindow.addActuator("Actuators", "RightFrontController", (Talon) actuatorsRightFrontController);
        
        actuatorsRightRearController = new Talon(3);
	LiveWindow.addActuator("Actuators", "RightRearController", (Talon) actuatorsRightRearController);
	
    actuatorsFrontCollectorRoller = new Talon(4);
    LiveWindow.addActuator("Actuators", "FrontCollectorRoller", (Talon) actuatorsFrontCollectorRoller);
    
    actuatorsRearCollectorRoller = new Talon(5);
    LiveWindow.addActuator("Actuators", "RearCollectorRoller", (Talon) actuatorsRearCollectorRoller);
        
        actuatorsFrontDeployMotor = new Talon(6);
	LiveWindow.addActuator("Actuators", "FrontDeployMotor", (Talon) actuatorsFrontDeployMotor);
        
        actuatorsRearDeployMotor = new Talon(7);
	LiveWindow.addActuator("Actuators", "RearDeployMotor", (Talon) actuatorsRearDeployMotor);
	
    actuatorsCatapultController = new Talon(9);
    LiveWindow.addActuator("Actuators", "CatapultController", (Talon) actuatorsCatapultController);
        
        
        actuatorsEjectorSolenoid = new Solenoid(1, 3);
	LiveWindow.addActuator("Actuators", "EjectorSolenoid", actuatorsEjectorSolenoid);
        

        
        actuatorsArduino1 = new DigitalOutput(11);
	
        
        actuatorsArduino2 = new DigitalOutput(12);
	
        
        actuatorsArduino3 = new DigitalOutput(4);
        
		gyro = new Gyro(0);
	LiveWindow.addSensor("Sensors", "gyro", gyro);
	
        sensorsFrontCollectorPot = new AnalogInput(1);
	LiveWindow.addSensor("Sensors", "FrontCollectorPot", sensorsFrontCollectorPot);
        
        sensorsBackCollectorPot = new AnalogInput(2);
	LiveWindow.addSensor("Sensors", "BackCollectorPot", sensorsBackCollectorPot);

// THIS ANALOG PORT HAS BEEN REPLACED BY THE GYRO
//        sensorsBallSettledInCatapult = new AnalogInput(2);
//	LiveWindow.addSensor("Sensors", "BallSettledInCatapult", sensorsBallSettledInCatapult);
        
        sensorsCatapultPotentiometer = new AnalogInput(3);
	LiveWindow.addSensor("Sensors", "CatapultPotentiometer", sensorsCatapultPotentiometer);
        
        sensorsFrontUpLimitSwitch = new DigitalInput(0);
	LiveWindow.addSensor("Sensors", "FrontUpLimitSwitch", sensorsFrontUpLimitSwitch);
	
	    sensorsBackUpLimitSwitch = new DigitalInput(1);
	LiveWindow.addSensor("Sensors", "BackUpLimitSwitch", sensorsBackUpLimitSwitch);

        sensorsFrontDownLimitSwitch = new DigitalInput(2);
	LiveWindow.addSensor("Sensors", "FrontDownLimitSwitch", sensorsFrontDownLimitSwitch);
        
        
        sensorsBackDownLimitSwitch = new DigitalInput(3);
	LiveWindow.addSensor("Sensors", "BackDownLimitSwitch", sensorsBackDownLimitSwitch);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        // Instantiate Serial Port object
        // Serial settings are:
        // - Baud Rate:  57600
        // - Data Bits:  8
        // - Stop Bits:  1
        // - Parity:     None
    }
}
