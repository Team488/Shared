// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc488.OnRobotCode.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc488.OnRobotCode.Robot;
import xbot.aerialassist.autonomousworkers.*;
import xbot.common.ExecState;
/**
 *
 */
public class  AutonomousCommand extends Command {
    
    private MasterAutonomousWorker autoChooser;
        
    public AutonomousCommand() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        autoChooser = new MasterAutonomousWorker();
        this.requires(Robot.catapult);
        this.requires(Robot.backCollectorRoller);
        this.requires(Robot.frontCollectorRoller);
        this.requires(Robot.drive);
        this.requires(Robot.fieldOrientedCollectionVirtual);
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        
        setTimeout(11);
        autoChooser.init();
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        autoChooser.exec();
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        ExecState state = autoChooser.isFinished();
        
        if ((state == ExecState.FAILURE) || (state == ExecState.SUCCESS))
        {
            return true;
        }
        
        if(this.isTimedOut())
        {
            return true;
        }
        
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
