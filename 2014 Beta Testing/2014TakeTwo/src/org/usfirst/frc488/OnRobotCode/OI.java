package org.usfirst.frc488.OnRobotCode;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc488.OnRobotCode.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import xbot.aerialassist.RobotContext;
import xbot.aerialassist.autonomousworkers.AutonomousWorkerFactory;
import xbot.aerialassist.autonomousworkers.CollectFromSideWorker;
import xbot.aerialassist.autonomousworkers.DeployBothCollectorsWorker;
import xbot.aerialassist.autonomousworkers.FireAndCockCatapultWorker;
import xbot.aerialassist.autonomousworkers.PrepareToCollectBallWorker;
import xbot.aerialassist.autonomousworkers.threeballauto.ThreeBallAutonomousWorker;
import xbot.aerialassist.autonomousworkers.threeballauto.OneBallJukeAuto;
import xbot.aerialassist.autonomousworkers.twoballauto.TwoBallAutonomousWorker;
import xbot.aerialassist.workers.*;
import xbot.common.actualrobot.CommandProxy;
import xbot.aerialassist.diagnostics.*;
import xbot.aerialassist.collection.*;
import xbot.aerialassist.drive.*;
import xbot.aerialassist.catapult.*;
import xbot.common.properties.DoubleProperty;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick leftJoystick;
    public Joystick rightJoystick;
    public Joystick operatorJoystick;
    public Joystick operatorPanel;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Left Joystick
    public JoystickButton leftTrigger;
    public JoystickButton leftButton2;
    public JoystickButton leftButton3;
    public JoystickButton leftButton4;
    public JoystickButton leftButton5;
    public JoystickButton leftButton6;
    public JoystickButton leftButton7;
    public JoystickButton leftButton8;
    public JoystickButton leftButton9;
    public JoystickButton leftButton10;
    public JoystickButton leftButton11;
    
    // Right Joystick
    public JoystickButton rightTrigger;    
    // Right button 2 is currently reserved to be used as a fake limit switch for the catapult.
    public JoystickButton rightButton3;
    public JoystickButton rightButton4;
    public JoystickButton rightButton5;
    public JoystickButton rightButton6;
    public JoystickButton rightButton7;
    public JoystickButton rightButton8;
    public JoystickButton rightButton9;
    public JoystickButton rightButton10;
    public JoystickButton rightButton11;
    
    // Test Joystick
    public JoystickButton operatorButton1;
    public JoystickButton operatorButton2;
    public JoystickButton operatorButton3;
    public JoystickButton operatorButton4;
    public JoystickButton operatorButton5;
    public JoystickButton operatorButton6;
    public JoystickButton operatorButton7;
    public JoystickButton operatorButton8;
    public JoystickButton operatorButton9;
    public JoystickButton operatorButton10;
    public JoystickButton operatorButton11;
    public JoystickButton operatorButton12;
    
    // And the few commands that are default commands and invoked by the OI
    public Command mecCommand;
    public Command cockCatapultCommand;
    public Command keepCatapultCockedCommand;
    public Command stopFrontCollectorCommand;
    public Command stopFrontRollerCommand;
    public Command stopBackCollectorCommand;
    public Command stopBackRollerCommand;
    public Command maintainFrontCollectorDeployCommand;
    public Command maintainBackCollectorDeployCommand;
    public Command listenFrontRoller;
    public Command listenBackRoller;
    public Command manualDeployFrontCollectorUpCommand;
    public Command manualDeployFrontCollectorDownCommand;
    public Command manualDeployBackCollectorUpCommand;
    public Command manualDeployBackCollectorDownCommand;
    public Command fieldOrientedCollectionCommand;
    public Command manualEjectorRetractCommand;
    
    private void InitializeDefaultCommands()
    {
        mecCommand = new CommandProxy(new DriveMecanumWithJoysticksWorker(), Robot.drive);
        cockCatapultCommand = new CommandProxy(new CatapultPIDWorker(), Robot.catapult);
        
        Collector frontCollector = RobotContext.Get().getCollectionCore().getFrontCollector();
        Collector backCollector = RobotContext.Get().getCollectionCore().getBackCollector();
        
        fieldOrientedCollectionCommand = new CommandProxy(new FieldOrientedCollectionWorker(), 
                Robot.fieldOrientedCollectionVirtual);
        
        maintainFrontCollectorDeployCommand = new CommandProxy(
                new CollectionPositionMaintainer(frontCollector), Robot.frontCollectorDeploy);
        maintainBackCollectorDeployCommand = new CommandProxy(
                new CollectionPositionMaintainer(backCollector), Robot.backCollectorDeploy);
        
        listenFrontRoller = new CommandProxy(
                new RollerListenerWorker(frontCollector, "Front"), Robot.frontCollectorRoller);
        listenBackRoller = new CommandProxy(
                new RollerListenerWorker(backCollector, "Back"), Robot.backCollectorRoller);
        stopFrontCollectorCommand = 
                new CommandProxy(new CollectorDeployWorker(frontCollector, CollectorDeployState.STOP), Robot.frontCollectorDeploy);
        stopFrontRollerCommand = 
                new CommandProxy(new CollectorRollerWorker(frontCollector, CollectorRollerState.STOP), Robot.frontCollectorRoller);
        stopBackCollectorCommand = 
                new CommandProxy(new CollectorDeployWorker(backCollector, CollectorDeployState.STOP), Robot.backCollectorDeploy);
        stopBackRollerCommand = 
                new CommandProxy(new CollectorRollerWorker(backCollector, CollectorRollerState.STOP), Robot.backCollectorRoller);
        manualDeployFrontCollectorUpCommand =
                new CommandProxy(new ManualDeployWorker(frontCollector, CollectorDeployState.UP), Robot.frontCollectorDeploy);
        manualDeployFrontCollectorDownCommand =
                new CommandProxy(new ManualDeployWorker(frontCollector, CollectorDeployState.DOWN), Robot.frontCollectorDeploy);
        manualDeployBackCollectorUpCommand =
                new CommandProxy(new ManualDeployWorker(backCollector, CollectorDeployState.UP), Robot.frontCollectorDeploy);
        manualDeployBackCollectorDownCommand =
                new CommandProxy(new ManualDeployWorker(backCollector, CollectorDeployState.DOWN), Robot.frontCollectorDeploy);
       
        manualEjectorRetractCommand = new CommandProxy(new ManualBallEjectionWorker(false), Robot.ejector);
    }
    
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        operatorPanel = new Joystick(3);
        
        operatorJoystick = new Joystick(2);
        
        rightJoystick = new Joystick(1);
        
        leftJoystick = new Joystick(0);
        
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        Subsystem[] allSystems = new Subsystem[] {
                    Robot.actuators,
                    Robot.backCollectorDeploy,
                    Robot.backCollectorRoller,
                    Robot.catapult,
                    Robot.drive,
                    Robot.frontCollectorDeploy,
                    Robot.frontCollectorRoller,
                    Robot.pneumatics,
                    Robot.sensors,
                   
        };
        
        InitializeDefaultCommands();
        InitializeAllJoystickButtons();
        
        Collector frontCollector = RobotContext.Get().getCollectionCore().getFrontCollector();
        Collector backCollector = RobotContext.Get().getCollectionCore().getBackCollector();
        
        Command onFieldCockCatapult = new CommandProxy(
                new CatapultPIDWorker(), Robot.catapult);
        
        Command testAutoCommand = new CommandProxy(
                new PrepareToCollectBallWorker(new AutonomousWorkerFactory(), frontCollector, backCollector),
                new Subsystem[] {Robot.frontCollectorRoller, Robot.backCollectorRoller, Robot.catapult, Robot.drive});
        
        Command oneBallJuke = new CommandProxy(new OneBallJukeAuto(new AutonomousWorkerFactory()), 
                new Subsystem[] {Robot.frontCollectorRoller, Robot.backCollectorRoller, Robot.catapult, Robot.drive});
        
        // The diagnostic command won't be associated with a button, but we want it on the Smart Dashboard.
        Command diagnosticCommand = new CommandProxy(new DiagnosticWorker(true), allSystems);
        
        Command diagnosticCommandNoDrive = new CommandProxy(new DiagnosticWorker(false), allSystems);
        
        Command calibrateCommand = new CommandProxy(new CalibrationWorker(), allSystems);
        
        Command fireCatapultCommand = new CommandProxy(
                new SetArmsAndFireCatapultWorker(true));
        
        Command fireCatapultUnderDuressCommand = new CommandProxy(
                new SetArmsDuressWorker());
        
        Command collectFromFrontCommand = new CommandProxy(
                new CollectFromSideWorker(
                        RobotContext.Get().getCollectionCore().getFrontCollector(),
                        RobotContext.Get().getCollectionCore().getBackCollector()));
        
        Command fireAndCockCatapultCommand = new CommandProxy(
                new FireAndCockCatapultWorker());
        
        CommandProxy fullAutonomousCommand = new CommandProxy(
                new ThreeBallAutonomousWorker(), new Subsystem[]{
                    Robot.catapult, 
                    Robot.backCollectorRoller,
                    Robot.frontCollectorRoller,
                    Robot.drive});
        
        CommandProxy twoBallAutonomousCommand = new CommandProxy(
                new TwoBallAutonomousWorker(), new Subsystem[]{
                    Robot.catapult, 
                    Robot.backCollectorRoller,
                    Robot.frontCollectorRoller,
                    Robot.drive});
        
        Command setArmsAndFireCommand = new CommandProxy(
                new SetArmsAndFireCatapultWorker());
        
        Command openBothCollectorsCommand = new CommandProxy(
                new DeployBothCollectorsWorker(
                    CollectorDeployState.DOWN,
                    CollectorDeployState.DOWN));
        
        Command closeBothCollectorsCommand = new CommandProxy(
                new DeployBothCollectorsWorker(
                    CollectorDeployState.UP,
                    CollectorDeployState.UP));
        
        Command ejectBallCommand = new CommandProxy(
                new EjectBallWorker(), 
                    new Subsystem[] { 
                        Robot.ejector,
                        Robot.backCollectorRoller, 
                        Robot.frontCollectorRoller,
                        Robot.fieldOrientedCollectionVirtual
                
                    });
                               
        
        // Drive Commands
        leftTrigger.whenPressed(mecCommand);
        rightTrigger.whenPressed(new CommandProxy(new DriveTankWithJoysticksWorker(), Robot.drive));
        leftButton9.whenPressed(new CommandProxy(new ResetGyroWorker(), Robot.sensors));
        leftButton2.whileHeld(new CommandProxy(new OrientForSpeedWorker()));
        
        rightButton5.whileHeld(new CommandProxy(new SetOrientToGoalWorker()));
        
        DoubleProperty driveForwardTimeout = 
                new DoubleProperty("DriveForwardTimeOutMS", 2500);
        Command driveForwardCommand = 
                new CommandProxy(
                    new DriveForTimeWorker(0, 1.0, driveForwardTimeout,true), 
                    Robot.drive);
        
                
        
        // Catapult Commands
        operatorButton1.whenPressed(fireCatapultCommand);
        operatorButton6.whenPressed(fireCatapultUnderDuressCommand);
        
        // Collection Commands
        Command openBoth = new CommandProxy(new LowerBothArmsWorker());
        operatorButton4.whileHeld(openBoth);
        operatorButton5.whileHeld(ejectBallCommand);
        operatorButton12.whileHeld(new CommandProxy(new AskingForBallWorker()));
        //operatorButton6.whenReleased(manualEjectorRetractCommand);
        operatorButton7.whenPressed(
                new CommandProxy(new CollectorDeployPIDWorker(frontCollector, CollectorDeployState.DOWN)));
        operatorButton9.whenPressed(
                new CommandProxy(new CollectorDeployPIDWorker(frontCollector, CollectorDeployState.UP)));
        
        operatorButton8.whenPressed(
                new CommandProxy(new CollectorDeployPIDWorker(backCollector, CollectorDeployState.DOWN)));
        operatorButton10.whenPressed(
                new CommandProxy(new CollectorDeployPIDWorker(backCollector, CollectorDeployState.UP)));
        operatorButton11.whenPressed(
                new CommandProxy(new FireCatapultWorker(), Robot.catapult));
        
        
        JoystickButton manualFireButton = new JoystickButton(operatorPanel, 12);
        manualFireButton.whileHeld(
                new CommandProxy(
                    new RunCatapultOverrideWorker(), 
                    new Subsystem[] {Robot.catapult, Robot.frontCollectorDeploy, Robot.backCollectorDeploy})
                );
    }
    
    private void InitializeAllJoystickButtons()
    {
        leftTrigger = new JoystickButton(leftJoystick, 0);
        leftButton2 = new JoystickButton(leftJoystick, 1);
        leftButton3 = new JoystickButton(leftJoystick, 2);
        leftButton4 = new JoystickButton(leftJoystick, 3);
        leftButton5 = new JoystickButton(leftJoystick, 4);
        leftButton6 = new JoystickButton(leftJoystick, 5);
        leftButton7 = new JoystickButton(leftJoystick, 6);
        leftButton8 = new JoystickButton(leftJoystick, 7); // Subject to change
        leftButton9 = new JoystickButton(leftJoystick, 8); // STC
        leftButton10 = new JoystickButton(leftJoystick, 9); // STC
        leftButton11 = new JoystickButton(leftJoystick, 10); // STC
        
        rightTrigger = new JoystickButton(rightJoystick, 0);
        //rightButton2 = new JoystickButton(rightJoystick, 2); Currently used as a sensor
        rightButton3 = new JoystickButton(rightJoystick, 2);
        rightButton4 = new JoystickButton(rightJoystick, 3);
        rightButton5 = new JoystickButton(rightJoystick, 4);
        rightButton6 = new JoystickButton(rightJoystick, 5);
        rightButton7 = new JoystickButton(rightJoystick, 6);
        rightButton8 = new JoystickButton(rightJoystick, 7);
        rightButton9 = new JoystickButton(rightJoystick, 8);
        rightButton10 = new JoystickButton(rightJoystick, 9);
        rightButton11 = new JoystickButton(rightJoystick, 10);
        
        operatorButton1 = new JoystickButton(operatorJoystick, 0);
        operatorButton2 = new JoystickButton(operatorJoystick, 1);
        operatorButton3 = new JoystickButton(operatorJoystick, 2);
        operatorButton4 = new JoystickButton(operatorJoystick, 3);
        operatorButton5 = new JoystickButton(operatorJoystick, 4);
        operatorButton6 = new JoystickButton(operatorJoystick, 5);
        operatorButton7 = new JoystickButton(operatorJoystick, 6);
        operatorButton8 = new JoystickButton(operatorJoystick, 7);
        operatorButton9 = new JoystickButton(operatorJoystick, 8);
        operatorButton10 = new JoystickButton(operatorJoystick, 9);
        operatorButton11 = new JoystickButton(operatorJoystick, 10);
        operatorButton12 = new JoystickButton(operatorJoystick, 11);
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getleftJoystick() {
        return leftJoystick;
    }
    public Joystick getrightJoystick() {
        return rightJoystick;
    }
    public Joystick getoperatorJoystick() {
        return operatorJoystick;
    }
    public Joystick getOperatorPanel() {
        return operatorPanel;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    
    public JoystickButton getleftButton1() {
        return leftTrigger;
    }
    
    public JoystickButton getrightButton1() {
        return rightTrigger;
    }
}
