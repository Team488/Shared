// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc488.OnRobotCode.commands;
import com.kauailabs.nav6.frc.BufferingSerialPort;
import com.kauailabs.nav6.frc.IMU;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.visa.VisaException;
import org.usfirst.frc488.OnRobotCode.Robot;
import org.usfirst.frc488.OnRobotCode.RobotMap;
import xbot.common.logging.LogProducer;
/**
 *
 */
public class  ResetIMU extends Command {
    public ResetIMU() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        try {
            BufferingSerialPort imu_serial_port = new BufferingSerialPort(57600);
            // Instantiate IMU object
            byte update_rate_hz = 50; // valid values:  4-100
            RobotMap.sensorsIMU = new IMU(imu_serial_port, update_rate_hz);
            // Add the IMU to the Live Window
            // Since the IMU inherits from LiveWindowSendable,
            // the live window will automatically be updated with
            // the current Yaw angle
            LiveWindow.addSensor("sensors", "IMU", RobotMap.sensorsIMU);
        } catch (VisaException e) {
            LogProducer logger = new LogProducer("RobotMap", LogProducer.LOGGING);
            logger.Log(LogProducer.WARNING, "NoIMU!!" + e.getMessage());
        }
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return true;
    }
    // Called once after isFinished returns true
    protected void end() {
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
