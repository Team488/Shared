// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc488.OnRobotCode;
    
import com.kauailabs.nav6.frc.BufferingSerialPort;
import com.kauailabs.nav6.frc.IMU;
import edu.wpi.first.wpilibj.AnalogChannel;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DigitalOutput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.visa.VisaException;
import xbot.common.logging.LogProducer;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Solenoid actuatorsShiftSolenoid;
    public static Compressor actuatorsCompressor;
    public static SpeedController actuatorsLeftFrontController;
    public static SpeedController actuatorsLeftRearController;
    public static SpeedController actuatorsRightFrontController;
    public static SpeedController actuatorsRightRearController;
    public static SpeedController actuatorsCatapultController;
    public static SpeedController actuatorsFrontDeployMotor;
    public static SpeedController actuatorsRearDeployMotor;
    public static SpeedController actuatorsFrontCollectorRoller;
    public static Solenoid actuatorsEjectorSolenoid;
    public static SpeedController actuatorsRearCollectorRoller;
    public static DigitalOutput actuatorsArduino1;
    public static DigitalOutput actuatorsArduino2;
    public static DigitalOutput actuatorsArduino3;
    public static Encoder sensorsLeftFollowWheel;
    public static Encoder sensorsRightFollowWheel;
    public static Encoder sensorsMiddleFollowWheel;
    public static AnalogChannel sensorsFrontCollectorPot;
    public static AnalogChannel sensorsBackCollectorPot;
    public static AnalogChannel sensorsFrontCollectorBallDetector;
    public static AnalogChannel sensorsBackCollectorBallDetector;
    public static AnalogChannel sensorsBallSettledInCatapult;
    public static AnalogChannel sensorsCatapultPotentiometer;
    public static DigitalInput sensorsFrontUpLimitSwitch;
    public static DigitalInput sensorsFrontDownLimitSwitch;
    public static DigitalInput sensorsBackUpLimitSwitch;
    public static DigitalInput sensorsBackDownLimitSwitch;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static IMU sensorsIMU;
    
    public RobotMap() {
    }
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        actuatorsShiftSolenoid = new Solenoid(1, 1);
	LiveWindow.addActuator("Actuators", "ShiftSolenoid", actuatorsShiftSolenoid);
        
        actuatorsCompressor = new Compressor(1, 14, 1, 1);
	
        
        actuatorsLeftFrontController = new Talon(1, 1);
	LiveWindow.addActuator("Actuators", "LeftFrontController", (Talon) actuatorsLeftFrontController);
        
        actuatorsLeftRearController = new Talon(1, 2);
	LiveWindow.addActuator("Actuators", "LeftRearController", (Talon) actuatorsLeftRearController);
        
        actuatorsRightFrontController = new Talon(1, 3);
	LiveWindow.addActuator("Actuators", "RightFrontController", (Talon) actuatorsRightFrontController);
        
        actuatorsRightRearController = new Talon(1, 4);
	LiveWindow.addActuator("Actuators", "RightRearController", (Talon) actuatorsRightRearController);
        
        actuatorsCatapultController = new Talon(1, 10);
	LiveWindow.addActuator("Actuators", "CatapultController", (Talon) actuatorsCatapultController);
        
        actuatorsFrontDeployMotor = new Talon(1, 7);
	LiveWindow.addActuator("Actuators", "FrontDeployMotor", (Talon) actuatorsFrontDeployMotor);
        
        actuatorsRearDeployMotor = new Talon(1, 8);
	LiveWindow.addActuator("Actuators", "RearDeployMotor", (Talon) actuatorsRearDeployMotor);
        
        actuatorsFrontCollectorRoller = new Talon(1, 5);
	LiveWindow.addActuator("Actuators", "FrontCollectorRoller", (Talon) actuatorsFrontCollectorRoller);
        
        actuatorsEjectorSolenoid = new Solenoid(1, 3);
	LiveWindow.addActuator("Actuators", "EjectorSolenoid", actuatorsEjectorSolenoid);
        
        actuatorsRearCollectorRoller = new Talon(1, 6);
	LiveWindow.addActuator("Actuators", "RearCollectorRoller", (Talon) actuatorsRearCollectorRoller);
        
        actuatorsArduino1 = new DigitalOutput(1, 11);
	
        
        actuatorsArduino2 = new DigitalOutput(1, 12);
	
        
        actuatorsArduino3 = new DigitalOutput(1, 13);
	
        
        sensorsLeftFollowWheel = new Encoder(1, 1, 1, 2, false, EncodingType.k1X);
	LiveWindow.addSensor("Sensors", "LeftFollowWheel", sensorsLeftFollowWheel);
        sensorsLeftFollowWheel.setDistancePerPulse(1.0);
        sensorsLeftFollowWheel.setPIDSourceParameter(PIDSourceParameter.kRate);
        sensorsLeftFollowWheel.start();
        sensorsRightFollowWheel = new Encoder(1, 3, 1, 4, false, EncodingType.k1X);
	LiveWindow.addSensor("Sensors", "RightFollowWheel", sensorsRightFollowWheel);
        sensorsRightFollowWheel.setDistancePerPulse(1.0);
        sensorsRightFollowWheel.setPIDSourceParameter(PIDSourceParameter.kRate);
        sensorsRightFollowWheel.start();
        sensorsMiddleFollowWheel = new Encoder(1, 5, 1, 6, false, EncodingType.k1X);
	LiveWindow.addSensor("Sensors", "MiddleFollowWheel", sensorsMiddleFollowWheel);
        sensorsMiddleFollowWheel.setDistancePerPulse(1.0);
        sensorsMiddleFollowWheel.setPIDSourceParameter(PIDSourceParameter.kRate);
        sensorsMiddleFollowWheel.start();
        sensorsFrontCollectorPot = new AnalogChannel(1, 1);
	LiveWindow.addSensor("Sensors", "FrontCollectorPot", sensorsFrontCollectorPot);
        
        sensorsBackCollectorPot = new AnalogChannel(1, 2);
	LiveWindow.addSensor("Sensors", "BackCollectorPot", sensorsBackCollectorPot);
        
        sensorsFrontCollectorBallDetector = new AnalogChannel(1, 3);
	LiveWindow.addSensor("Sensors", "FrontCollectorBallDetector", sensorsFrontCollectorBallDetector);
        
        sensorsBackCollectorBallDetector = new AnalogChannel(1, 4);
	LiveWindow.addSensor("Sensors", "BackCollectorBallDetector", sensorsBackCollectorBallDetector);
        
        sensorsBallSettledInCatapult = new AnalogChannel(1, 5);
	LiveWindow.addSensor("Sensors", "BallSettledInCatapult", sensorsBallSettledInCatapult);
        
        sensorsCatapultPotentiometer = new AnalogChannel(1, 6);
	LiveWindow.addSensor("Sensors", "CatapultPotentiometer", sensorsCatapultPotentiometer);
        
        sensorsFrontUpLimitSwitch = new DigitalInput(1, 7);
	LiveWindow.addSensor("Sensors", "FrontUpLimitSwitch", sensorsFrontUpLimitSwitch);
        
        sensorsFrontDownLimitSwitch = new DigitalInput(1, 9);
	LiveWindow.addSensor("Sensors", "FrontDownLimitSwitch", sensorsFrontDownLimitSwitch);
        
        sensorsBackUpLimitSwitch = new DigitalInput(1, 8);
	LiveWindow.addSensor("Sensors", "BackUpLimitSwitch", sensorsBackUpLimitSwitch);
        
        sensorsBackDownLimitSwitch = new DigitalInput(1, 10);
	LiveWindow.addSensor("Sensors", "BackDownLimitSwitch", sensorsBackDownLimitSwitch);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        // Instantiate Serial Port object
        // Serial settings are:
        // - Baud Rate:  57600
        // - Data Bits:  8
        // - Stop Bits:  1
        // - Parity:     None
        try {
            BufferingSerialPort imu_serial_port = new BufferingSerialPort(57600);
            // Instantiate IMU object
            byte update_rate_hz = 50; // valid values:  4-100
            sensorsIMU = new IMU(imu_serial_port, update_rate_hz);
            // Add the IMU to the Live Window
            // Since the IMU inherits from LiveWindowSendable,
            // the live window will automatically be updated with
            // the current Yaw angle
            LiveWindow.addSensor("sensors", "IMU", sensorsIMU);
        } catch (VisaException e) {
            LogProducer logger = new LogProducer("RobotMap", LogProducer.LOGGING);
            logger.Log(LogProducer.WARNING, "NoIMU!!" + e.getMessage());
        }
    }
}
