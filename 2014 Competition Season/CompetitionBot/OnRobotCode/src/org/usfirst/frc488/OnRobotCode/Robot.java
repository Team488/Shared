// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc488.OnRobotCode;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc488.OnRobotCode.commands.*;
import org.usfirst.frc488.OnRobotCode.subsystems.*;
import xbot.aerialassist.RobotContext;
import xbot.common.CommonTools;
import xbot.common.actualrobot.RobotLogWriter;
import xbot.common.actualrobot.RobotPermanentStorage;
import xbot.common.actualrobot.SmartDashboardTableWrapper;
import xbot.common.logging.*;
import xbot.aerialassist.telemetry.*;
import xbot.aerialassist.workers.GatherTelemetryWorker;
import xbot.common.PropertySaverWorker;
import xbot.common.WorkerBase;
import xbot.common.actualrobot.RobotTime;
import xbot.common.actualrobot.TrigUtil;
import xbot.common.properties.ITableProxy;
/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
    Command autonomousCommand;
    public static LogProducer robotLogProducer;
    public static OI oi;
    private WorkerBase propertySaverWorker;
    GatherTelemetryWorker gatherTelemetry;
    
    Profiler telProfiler;
    Profiler schedProfiler;
    Profiler adapterProfiler;
    Profiler lowTasksProfiler;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Ejector ejector;
    public static Drive drive;
    public static Actuators actuators;
    public static Sensors sensors;
    public static Pneumatics pneumatics;
    public static FrontCollectorDeploy frontCollectorDeploy;
    public static BackCollectorDeploy backCollectorDeploy;
    public static FrontCollectorRoller frontCollectorRoller;
    public static BackCollectorRoller backCollectorRoller;
    public static Catapult catapult;
    public static FieldOrientedCollectionVirtual fieldOrientedCollectionVirtual;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
        // TODO: replace TableProxy() with new file backed implementation of 
        // ITableProxy
        ITableProxy table = new SmartDashboardTableWrapper();
        // disable the smartdashboard table for debugging/perf, switch comments
        //ITableProxy table = new TableProxy("fakeTable");
        CommonTools.CreateCommonTools(new RobotTime(),  new RobotLogWriter("Log"), new RobotLogWriter("Telemetry"),
                new RobotPermanentStorage(), table, new TrigUtil());
        robotLogProducer = new LogProducer("Robot", LogProducer.LOGGING);
        robotLogProducer.Log(LogProducer.IMPORTANT, "RobotContext initialized!");
        // initialize robot context 
        RobotContext.Get();
	RobotMap.init();
        gatherTelemetry = new GatherTelemetryWorker();
        
        telProfiler = new Profiler("Telemetry", 100);
        schedProfiler = new Profiler("Scheduler", 100);
        adapterProfiler = new Profiler("Adapter", 100);
        lowTasksProfiler = new Profiler("Low tasks", 100);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        ejector = new Ejector();
        drive = new Drive();
        actuators = new Actuators();
        sensors = new Sensors();
        pneumatics = new Pneumatics();
        frontCollectorDeploy = new FrontCollectorDeploy();
        backCollectorDeploy = new BackCollectorDeploy();
        frontCollectorRoller = new FrontCollectorRoller();
        backCollectorRoller = new BackCollectorRoller();
        catapult = new Catapult();
        fieldOrientedCollectionVirtual = new FieldOrientedCollectionVirtual();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        SmartDashboard.putData(drive);
        SmartDashboard.putData(pneumatics);
        SmartDashboard.putData(frontCollectorDeploy);
        SmartDashboard.putData(backCollectorDeploy);
        SmartDashboard.putData(frontCollectorRoller);
        SmartDashboard.putData(backCollectorRoller);
        SmartDashboard.putData(Scheduler.getInstance());
        // This MUST be here. If the OI creates Commands (which it very likely
        // will), constructing it during the construction of CommandBase (from
        // which commands extend), subsystems are not guaranteed to be
        // yet. Thus, their requires() statements may grab null pointers. Bad
        // news. Don't move it.
        oi = new OI();
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        autonomousCommand = new AutonomousCommand();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        this.propertySaverWorker = new PropertySaverWorker();
    }
    
    public void autonomousInit() {
        robotLogProducer.Log(LogProducer.IMPORTANT, "autonomousInit()");
        // schedule the autonomous command (example)
        if (autonomousCommand != null) 
        {
            autonomousCommand.start();
        }
        
        
        RobotContext.Get().GetDriveCore().SetDesiredHeading(
                RobotContext.Get().GetSensorCore().getCurrentHeading());
        SetRobotDisabledStateWorker setEnabled = new SetRobotDisabledStateWorker(false);
        RobotContext.Get().getAutonomousCore().setMarker();
        setEnabled.init();
        setEnabled.exec();
    }
    
    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        FulfillCoreContract();
    }
    
    public void teleopInit() {
        robotLogProducer.Log(LogProducer.IMPORTANT, "teleopInit()");
	// This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        
        // As a safety measure - when enabled, set the current heading to be the desired heading.
        // That way, if we disable the robot then move it somewhere, it won't immediatley act violently
        // upon being enabled.
        RobotContext.Get().GetDriveCore().SetDesiredHeading(
                RobotContext.Get().GetSensorCore().getCurrentHeading());
       
        SetRobotDisabledStateWorker setEnabled = new SetRobotDisabledStateWorker(false);
        setEnabled.init();
        setEnabled.exec();
    }
    
    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {         
        schedProfiler.startProfile();
        Scheduler.getInstance().run();
        schedProfiler.stopProfile();
        FulfillCoreContract();
    }
    
    /**
     * This function called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
    
    /**
     * Initialization code for disabled mode should go here.
     *
     * Users should override this method for initialization code which will be called each time
     * the robot enters disabled mode.
     */
    public void disabledInit() {
        robotLogProducer.Log(LogProducer.IMPORTANT, "disabledInit()");
        this.propertySaverWorker.init();
        this.propertySaverWorker.exec();
        FlushLogsForDisabled();

        SetRobotDisabledStateWorker setDisabled = new SetRobotDisabledStateWorker(true);
        setDisabled.init();
        setDisabled.exec();
    }
    
    public void disabledPeriodic() {
        FulfillCoreContract();
    }
    
    private void FlushLogsForDisabled()
    {
        ForceFlushLogWorker logs = new ForceFlushLogWorker();
        ForceFlushTelemetryWorker telemetry = new ForceFlushTelemetryWorker();
        logs.exec();
        telemetry.exec();
    }
    
    private void FulfillCoreContract()
    {   
        telProfiler.startProfile();
        gatherTelemetry.exec();
        telProfiler.stopProfile();
        
        adapterProfiler.startProfile();
        RoboAdapter.GetInstance().UpdateNormal();
        adapterProfiler.stopProfile();
        
        lowTasksProfiler.startProfile();
        CommonTools.Get().GetLowPriorityTasks().Feed();
        lowTasksProfiler.stopProfile();
    }
    
   
}
